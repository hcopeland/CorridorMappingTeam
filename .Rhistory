i=1
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[fa$yr == yr_rng[i]], probs = qtl.start.spring.mig),0)
wint.start
fa$End.Date[fa$yr == yr_rng[i]]
sp$Start.Date[fa$yr == yr_rng[i]]
fa$yr == yr_rng[i]
View(sp)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]], probs = qtl.start.spring.mig),0)
wint.end
sp$Start.Date[sp$yr == yr_rng[i]]
yr_rng[i]
i=0
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1])
wintr
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i-1]], probs = qtl.end.fall.mig),0)
wint.start
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]-1], probs = qtl.end.fall.mig),0)
wint.start
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]], probs = qtl.start.spring.mig),0)
wint.end
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
wint.end
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
data.frame(winter=wintr, wint.start=wint.start, wint.end=wint.end)
i=1
yr_rng[i]
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wintr
yr_rng[i]
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]], probs = qtl.start.spring.mig),0)
data.frame(winter=wintr, wint.start=wint.start, wint.end=wint.end)
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]], probs = qtl.start.spring.mig),0)
data.frame(winter=wintr, wint.start=wint.start, wint.end=wint.end)
wintr
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
data.frame(winter=wintr, wint.start=wint.start, wint.end=wint.end)
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=wint.start, wint.end=wint.end))
}))
dts
yr_rng
mn_strt <- as.POSIXct(strptime(paste0("2018", substr(na.omit(as.character(dts$wint.start)),5,19)),format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
mn_strt
mnths <- na.omit(as.numeric(strftime(dts$wint.start, format = "%m", tz = "UTC")))
mnths
mn_strt <- as.POSIXct(strptime(paste0(ifelse(mnths > 8, "2017","2018"), substr(na.omit(as.character(dts$wint.start)),5,19)),format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
mn_strt
mn_strt <- mean(as.POSIXct(strptime(paste0(ifelse(mnths > 8, "2017","2018"), substr(na.omit(as.character(dts$wint.start)),5,19)),format = "%Y-%m-%d %H:%M:%S"), tz="GMT"))
mn_strt
dts
yr_rng <- unique(fl$yr)
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=paste(strftime(wint.start, format = "%m", tz = "GMT"),strftime(wint.start, format = "%d", tz = "GMT"),sep="-"),
wint.end=paste(strftime(wint.end, format = "%m", tz = "GMT"),strftime(wint.end, format = "%d", tz = "GMT"),sep="-")))
}))
dts
mnths <- na.omit(as.numeric(substr(dts$wint.start, 1,2)))
substr(dts$wint.start, 1,2)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 1,2)))
mnths
mnths <- as.numeric(substr(na.omit(dts$wint.start), 1,2))
mnths
na.omit(dts$wint.start)
dts
dts[dts == "NA-NA"] <- NA
dts
mnths <- as.numeric(substr(na.omit(dts$wint.start), 1,2))
mnths
mn_strt <- mean(as.POSIXct(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",na.omit(as.character(dts$wint.start))),format = "%Y-%m-%d"), tz="GMT"))
mn_strt
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",na.omit(as.character(dts$wint.start))),format = "%Y-%m-%d")))
mn_strt
substr(mn_strt,6,10)
dts$wint.start[is.na(dts$wint.start)==TRUE] <- substr(mn_strt,6,10)
dts
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=paste(strftime(wint.start, format = "%m", tz = "GMT"),strftime(wint.start, format = "%d", tz = "GMT"),sep="-"),
wint.end=paste(strftime(wint.end, format = "%m", tz = "GMT"),strftime(wint.end, format = "%d", tz = "GMT"),sep="-")))
}))
dts
dts[dts == "NA-NA"] <- NA
dts
mnths <- as.numeric(substr(na.omit(dts$wint.start), 1,2))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",na.omit(as.character(dts$wint.start))),format = "%Y-%m-%d")))
mn_strt
is.na(dts$wint.start)==TRUE
substr(mn_strt,6,10)
dts
dts$wint.start[is.na(dts$wint.start)==TRUE] <- substr(mn_strt,6,10)
dts
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=paste(strftime(wint.start, format = "%m", tz = "GMT"),strftime(wint.start, format = "%d", tz = "GMT"),sep="-"),
wint.end=paste(strftime(wint.end, format = "%m", tz = "GMT"),strftime(wint.end, format = "%d", tz = "GMT"),sep="-")))
}))
dts
dts[dts == "NA-NA"] <- NA
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 1,2))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",na.omit(as.character(dts$wint.start))),format = "%Y-%m-%d")))
dts$wint.start[is.na(dts$wint.start)==TRUE] <- substr(mn_strt,6,10)
dts
mnths <- as.numeric(substr(na.omit(dts$wint.end), 1,2))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",na.omit(as.character(dts$wint.end))),format = "%Y-%m-%d")))
mn_strt
mnths <- as.numeric(substr(na.omit(dts$wint.end), 1,2))
mn_end <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",na.omit(as.character(dts$wint.end))),format = "%Y-%m-%d")))
dts$wint.start[is.na(dts$wint.end)==TRUE] <- substr(mn_end,6,10)
dts
substr(mn_end,6,10)
dts$wint.end[is.na(dts$wint.end)==TRUE] <- substr(mn_end,6,10)
dts
# read in the shapefile
print("Loading the shapefile (this can take a few minutes)...")
# d <- readOGR(shpfl_fldr, shpfl_name)
d <- st_read(shpfl_fldr, shpfl_name)
d <- as(d, "Spatial")
print(paste0("Your shapefiles has ", nrow(d), " rows."))
if(all(c(idname,datename) %in% names(d)) == FALSE)
stop("There is an issue with the columns in your sequences. See Error 1.")
#reproject to new projection, if necessary
proj <- proj4string(d)
if(proj != out_proj){
d <- spTransform(d, CRS(out_proj))
}
#reduce the dataset to columns of interest
d <- d[,c(idname,datename)]
names(d) <- c("id","date")
#fix the dates  (it is OK to specify GMT, since all dates will be in GMT!)
d$date <- as.POSIXct(strptime(d$date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
if(any(is.na(d$date)))
stop("You have a problem with your date column! It does not seem to be a character that was previously in POSIX format.")
dts
yr_rng <- unique(fl$yr)
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=paste(strftime(wint.start, format = "%m", tz = "GMT"),strftime(wint.start, format = "%d", tz = "GMT"),sep="-"),
wint.end=paste(strftime(wint.end, format = "%m", tz = "GMT"),strftime(wint.end, format = "%d", tz = "GMT"),sep="-")))
}))
i=1
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.start
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=substr(wint.start,1,10),
wint.end=substr(wint.end,1,10)))
}))
dts
str(dts)
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
str(dts)
dts
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mnths
dts
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.start)),6,10)),format = "%Y-%m-%d")))
dts$wint.start[is.na(dts$wint.start)==TRUE] <- substr(mn_strt,6,10)
dts
ifelse(as.numeric(substr(mn_strt,6,7))> 8, paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4),substr(mn_strt,6,10)))
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=substr(wint.start,1,10),
wint.end=substr(wint.end,1,10)))
}))
dts
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.start)),6,10)),format = "%Y-%m-%d")))
mn_strt
dts$wint.start[is.na(dts$wint.start)==TRUE] <- ifelse(as.numeric(substr(mn_strt,6,7))> 8, paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4),substr(mn_strt,6,10)))
dts
as.numeric(substr(mn_strt,6,7))
paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4),substr(mn_strt,6,10))
dts$wint.start[is.na(dts$wint.start)==TRUE] <- ifelse(as.numeric(substr(mn_strt,6,7)) > 8,
paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4),substr(mn_strt,6,10)),
paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],6,9),substr(mn_strt,6,10)))
dts
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=substr(wint.start,1,10),
wint.end=substr(wint.end,1,10)))
}))
dts
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.start)),6,10)),format = "%Y-%m-%d")))
mn_strt
ifelse(as.numeric(substr(mn_strt,6,7)) > 8,
paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4),substr(mn_strt,6,10)),
paste(substr(dts$winter[is.na(dts$wint.start)==TRUE],6,9),substr(mn_strt,6,10))
)
yrs <- ifelse(as.numeric(substr(mn_strt,6,7)) > 8,
substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4),
substr(dts$winter[is.na(dts$wint.start)==TRUE],6,9))
yrs
substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4)
if(as.numeric(substr(mn_strt,6,7)) > 8){
yrs <- substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4)
}else{
yrs <- substr(dts$winter[is.na(dts$wint.start)==TRUE],6,9)
}
yrs
paste(yrs, "-", substr(mn_strt,6,10))
paste0(yrs, "-", substr(mn_strt,6,10))
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=substr(wint.start,1,10),
wint.end=substr(wint.end,1,10)))
}))
dts
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.start)),6,10)),format = "%Y-%m-%d")))
if(as.numeric(substr(mn_strt,6,7)) > 8){
yrs <- substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4)
}else{
yrs <- substr(dts$winter[is.na(dts$wint.start)==TRUE],6,9)
}
dts$wint.start[is.na(dts$wint.start)==TRUE] <- paste0(yrs, "-", substr(mn_strt,6,10))
dts
mnths <- as.numeric(substr(na.omit(dts$wint.end), 6,7))
mnths
mn_end <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.end)),6,10)),format = "%Y-%m-%d")))
mn_end
as.numeric(substr(mn_end,6,7)) > 8
dts
if(as.numeric(substr(mn_end,6,7)) > 8){
yrs <- substr(dts$winter[is.na(dts$wint.end)==TRUE],1,4)
}else{
yrs <- substr(dts$winter[is.na(dts$wint.end)==TRUE],6,9)
}
yrs
dts$wint.end[is.na(dts$wint.end)==TRUE] <- paste0(yrs, "-", substr(mn_end,6,10))
dts
# read in the shapefile
print("Loading the shapefile (this can take a few minutes)...")
# d <- readOGR(shpfl_fldr, shpfl_name)
d <- st_read(shpfl_fldr, shpfl_name)
d <- as(d, "Spatial")
#keep only the data within the date ranges
dts$wint.start <- as.POSIXct(strptime(paste(dts$wint.start," 00:00:01",sep=""), format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
dts$wint.end <- as.POSIXct(strptime(paste(dts$wint.end," 23:59:59",sep=""), format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
dts
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i]]
tmp$winter <- dts$winter[i]
return(tmp)
}))
norw(d)
nrow(d)
nrow(d2)
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
tmp$winter <- dts$winter[i]
return(tmp)
}))
i=1
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
nrow(tmp)
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
next
}
tmp$winter <- dts$winter[i]
return(tmp)
}))
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
return(tmp)
}))
nrow(d)
nrow(d2)
1:nrow(dts)
i=1
dts$wint.start[i]
head(d)
print(paste0("Your shapefiles has ", nrow(d), " rows."))
if(all(c(idname,datename) %in% names(d)) == FALSE)
stop("There is an issue with the columns in your sequences. See Error 1.")
#reproject to new projection, if necessary
proj <- proj4string(d)
if(proj != out_proj){
d <- spTransform(d, CRS(out_proj))
}
#reduce the dataset to columns of interest
d <- d[,c(idname,datename)]
names(d) <- c("id","date")
#fix the dates  (it is OK to specify GMT, since all dates will be in GMT!)
d$date <- as.POSIXct(strptime(d$date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
if(any(is.na(d$date)))
stop("You have a problem with your date column! It does not seem to be a character that was previously in POSIX format.")
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
return(tmp)
}))
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
next
}
tmp$winter <- dts$winter[i]
return(tmp)
}))
d2 <- do.call(rbind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
return(tmp)
}))
d2 <- do.call(bind, lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
return(tmp)
}))
d2 <- lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
return(tmp)
})
head(d2)
head(d2[[1]])
head(d2[[2]])
head(d2[[3]])
head(d2[[4]])
head(d2[[5]])
i=1
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
nrow(tmp)
d2[sapply(d2, is.null)] <- NULL
d2 <- do.call(rbind, d2)
nrow(d)
nrow(d2)
d <- lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
return(tmp)
})
d[sapply(d, is.null)] <- NULL
d <- do.call(rbind, d)
d <- st_read(shpfl_fldr, shpfl_name)
d <- as(d, "Spatial")
print(paste0("Your shapefiles has ", nrow(d), " rows."))
if(all(c(idname,datename) %in% names(d)) == FALSE)
stop("There is an issue with the columns in your sequences. See Error 1.")
#reproject to new projection, if necessary
proj <- proj4string(d)
if(proj != out_proj){
d <- spTransform(d, CRS(out_proj))
}
#reduce the dataset to columns of interest
d <- d[,c(idname,datename)]
names(d) <- c("id","date")
#fix the dates  (it is OK to specify GMT, since all dates will be in GMT!)
d$date <- as.POSIXct(strptime(d$date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
if(any(is.na(d$date)))
stop("You have a problem with your date column! It does not seem to be a character that was previously in POSIX format.")
dts
#keep only the data within the date ranges
d$year <- as.numeric(strftime(d$date, format = "%Y", tz = "GMT"))
i=1
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
as.numeric(substr(dts$wint.start[i],6,7)) <6
head(paste0(tmp$id,"_wi", substr(tmp$year,3,4)))
d$month <- as.numeric(strftime(d$date, format = "%m", tz = "GMT"))
d$jul <- as.numeric(strftime(d$date, format = "%j", tz = "GMT"))
d <- lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
#create a unique winter period ID (so the year of teh winter means the year at the end of the winter period)
if(as.numeric(substr(dts$wint.start[i],6,7)) <6){ #if you specified start of winter after 1 January, instead of in the previous year
tmp$id_yr <- paste0(tmp$id,"_wi", substr(tmp$year,3,4))
}else{
tmp$id_yr <- paste0(tmp$id,"_wi", substr(ifelse(temp$month>6,temp$year+1,temp$year),3,4))
}
return(tmp)
})
d <- lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
#create a unique winter period ID (so the year of teh winter means the year at the end of the winter period)
if(as.numeric(substr(dts$wint.start[i],6,7)) <6){ #if you specified start of winter after 1 January, instead of in the previous year
tmp$id_yr <- paste0(tmp$id,"_wi", substr(tmp$year,3,4))
}else{
tmp$id_yr <- paste0(tmp$id,"_wi", substr(ifelse(tmp$month>6,tmp$year+1,tmp$year),3,4))
}
return(tmp)
})
d[sapply(d, is.null)] <- NULL
d <- do.call(rbind, d)
nrow(d)
head(d)
if(any(is.na(d$id_yr)))
stop("You have an issue. See error 2.")
seqs <- unique(d$id_yr)
