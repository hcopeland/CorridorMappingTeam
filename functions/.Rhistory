bigData.sp = append(bigData.sp,spDataFrame.list[[i]]@polygons)
}
# create the spatial data frame with a projection (same as above)
bigData = SpatialPolygonsDataFrame(SpatialPolygons(bigData.sp),bigData.df)
proj4string(bigData) <- proj_of_ascs
bigData <- aggregate(bigData, "GRIDCODE")   #dissolve the polygons based on the gridcode
head(bigData)
plot(bigdata[1,])
plot(bigData[1,])
order(bigData$GRIDCODE)
bigData <- bigData[order(bigData$GRIDCODE),]
head(bigData)
out_fldr
bigData@plotOrder
# write to a shapefile
writeOGR(bigData,out_fldr,"corridors", driver="ESRI Shapefile")
library(raster)
v <- raster()
class(v)
shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output"
shpfl_name= "pointsOut_20190207093941"
idname="newUid"  #name of the column representing animal ID
datename="nwMstrD"   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv"  # metadata file from migration part of analysis
use_same_annual_dates=FALSE #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95 #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW"   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
if(all(c("rgdal","foreign","stringr","sf") %in% installed.packages()[,1])==FALSE)
stop("You must install the following packages: rgdal, foreign, sf, and stringr")
require(rgdal)
require(foreign)
require(stringr)
require(sf)
fl <- read.csv(mig.metadata.file)   #Note, that you MUST do migration BBs before you can do winter range BBs!
fl$seas <- substr(str_split_fixed(fl$input.file, "_",2)[,2],1,2)
fl$yr <- substr(str_split_fixed(fl$input.file, "_",2)[,2],3,4)
fl$yr <- as.numeric(ifelse(as.numeric(fl$yr) > 80, paste0("19",fl$yr), paste0("20",fl$yr)))
fl$Start.Date <- as.POSIXct(strptime(fl$Start.Date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
fl$End.Date <- as.POSIXct(strptime(fl$End.Date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
sp <- fl[fl$seas == "sp",]
fa <- fl[fl$seas == "fa",]
yr_rng <- unique(fl$yr)
dts <- do.call(rbind, lapply(0:length(yr_rng), function(i){
if(i == 0){
wintr <- paste(yr_rng[i+1]-1, yr_rng[i+1], sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i+1]-1], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i+1]], probs = qtl.start.spring.mig),0)
}else{
wintr <- paste(yr_rng[i], yr_rng[i]+1, sep="_")
wint.start <- round(quantile(fa$End.Date[fa$yr == yr_rng[i]], probs = qtl.end.fall.mig),0)
wint.end <- round(quantile(sp$Start.Date[sp$yr == yr_rng[i]+1], probs = qtl.start.spring.mig),0)
}
return(data.frame(winter=wintr, wint.start=substr(wint.start,1,10),
wint.end=substr(wint.end,1,10)))
}))
head(dts)
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.start)),6,10)),format = "%Y-%m-%d")))
if(as.numeric(substr(mn_strt,6,7)) > 8){
yrs <- substr(dts$winter[is.na(dts$wint.start)==TRUE],1,4)
}else{
yrs <- substr(dts$winter[is.na(dts$wint.start)==TRUE],6,9)
}
dts$wint.start[is.na(dts$wint.start)==TRUE] <- paste0(yrs, "-", substr(mn_strt,6,10))
dts
mnths <- as.numeric(substr(na.omit(dts$wint.end), 6,7))
mn_end <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.end)),6,10)),format = "%Y-%m-%d")))
if(as.numeric(substr(mn_end,6,7)) > 8){
yrs <- substr(dts$winter[is.na(dts$wint.end)==TRUE],1,4)
}else{
yrs <- substr(dts$winter[is.na(dts$wint.end)==TRUE],6,9)
}
dts$wint.end[is.na(dts$wint.end)==TRUE] <- paste0(yrs, "-", substr(mn_end,6,10))
print(dts)
loca <- str_locate_all(mig.metadata.file,"/")
loca <- loca[[1]][nrow(loca[[1]]),1]
#change columns back to posix
dts2 <- dts
dts$wint.start <- as.POSIXct(strptime(paste(dts$wint.start," 00:00:01",sep=""), format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
dts$wint.end <- as.POSIXct(strptime(paste(dts$wint.end," 23:59:59",sep=""), format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
# d <- readOGR(shpfl_fldr, shpfl_name)
d <- st_read(shpfl_fldr, shpfl_name)   #use sf package
d <- as(d, "Spatial")
print(paste0("Your shapefiles has ", nrow(d), " rows."))
if(all(c(idname,datename) %in% names(d)) == FALSE)
stop("There is an issue with the columns in your sequences. See Error 1.")
#reproject to new projection, if necessary
proj <- proj4string(d)
if(proj != out_proj){
d <- spTransform(d, CRS(out_proj))
}
#reduce the dataset to columns of interest
d <- d[,c(idname,datename)]
names(d) <- c("id","date")
#fix the dates  (it is OK to specify GMT, since all dates will be in GMT!)
d$date <- as.POSIXct(strptime(d$date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
#keep only the data within the date ranges
d$year <- as.numeric(strftime(d$date, format = "%Y", tz = "GMT"))
d$month <- as.numeric(strftime(d$date, format = "%m", tz = "GMT"))
dts
d <- lapply(1:nrow(dts), function(i){
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
if(nrow(tmp)==0){
return(NULL)
}
tmp$winter <- dts$winter[i]
#create a unique winter period ID (so the year of teh winter means the year at the end of the winter period)
if(as.numeric(substr(dts$wint.start[i],6,7)) <6){ #if you specified start of winter after 1 January, instead of in the previous year
tmp$id_yr <- paste0(tmp$id,"_wi", substr(tmp$year,3,4))
}else{
tmp$id_yr <- paste0(tmp$id,"_wi", substr(ifelse(tmp$month>6,tmp$year+1,tmp$year),3,4))
}
return(tmp)
})
d[sapply(d, is.null)] <- NULL
d <- do.call(rbind, d)
head(d)
dup <- duplicated(paste(d$date, d$id))
table(dup)
#identify the unique sequences
seqs <- unique(d$id_yr)
table(seqs)
dts
nrow(dts)
i=2
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i],]
nrow(tmp)==0
dts$winter[i]
tmp$winter <- dts$winter[i]
head(tmp)
dts$winter[i]
tmp$id_yr <- paste0(tmp$id,"_wi", substr(dts$winter[i],6,10))
#source the functions you will need
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.seqs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BBs.W.R")
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=TRUE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
#source the functions you will need
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.seqs.W.R")
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=TRUE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output"
shpfl_name= "pointsOut_20190207093941"
idname="newUid"  #name of the column representing animal ID
datename="nwMstrD"   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv"  # metadata file from migration part of analysis
use_same_annual_dates=FALSE #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95 #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW"   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
#manage packages
if(all(c("rgdal","foreign","stringr","sf") %in% installed.packages()[,1])==FALSE)
stop("You must install the following packages: rgdal, foreign, sf, and stringr")
require(rgdal)
require(foreign)
require(stringr)
require(sf)
#check teh new directory
if(dir.exists(out_fldr)==FALSE){
dir.create(out_fldr)
}
if(length(dir(out_fldr))> 0)
stop("Your out_fldr Has something in it. It should be empty!")
fl <- read.csv(mig.metadata.file)   #Note, that you MUST do migration BBs before you can do winter range BBs!
fl$seas <- substr(str_split_fixed(fl$input.file, "_",2)[,2],1,2)
fl$yr <- substr(str_split_fixed(fl$input.file, "_",2)[,2],3,4)
fl$yr <- as.numeric(ifelse(as.numeric(fl$yr) > 80, paste0("19",fl$yr), paste0("20",fl$yr)))
fl$Start.Date <- as.POSIXct(strptime(fl$Start.Date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
fl$End.Date <- as.POSIXct(strptime(fl$End.Date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
unique(fl$yr)
yr_rng <- unique(fl$yr)
yr_rng
i=0
yr_rng[i+1]-1
yr_rng[i+1]
fl <- fl[order(fl$brownian.motion.variance),]
unique(fl$yr)
View(fl)
View(fl)
yr_rng[i+1]-1
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.seqs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BBs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BB.avgs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.core.areas.W.R")
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=TRUE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=FALSE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=FALSE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.seqs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BBs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BB.avgs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.core.areas.W.R")
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=FALSE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.seqs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BBs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.BB.avgs.W.R")
source("C:/Users/jmerkle/Documents/GitHub/CorridorMappingTeam/functions/create.core.areas.W.R")
#step 1. Create winter sequences from the output of Migration Mapper (tab 6)
create.seqs.W(shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output",
shpfl_name= "pointsOut_20190207093941" ,
idname="newUid",  #name of the column representing animal ID
datename="nwMstrD",   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv",  # metadata file from migration part of analysis
use_same_annual_dates=FALSE, #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95, #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05,   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW",   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")   #name a projection you want the output to be in. Then carry this proj through the rest of the steps
warnings()
shpfl_fldr = "C:/Users/jmerkle/Desktop/Mapp2/tab6output"
shpfl_name= "pointsOut_20190207093941"
idname="newUid"  #name of the column representing animal ID
datename="nwMstrD"   #name of the column representing date in POSIX format
mig.metadata.file="C:/Users/jmerkle/Desktop/Mapp2/tab6output/metadata.csv"  # metadata file from migration part of analysis
use_same_annual_dates=FALSE #if TRUE, then will identify the same winter period for each year based on the qtl.end.fall.mig and qtl.start.spr.mig. If FALSE, winter is defined for each id-yr as the end of fall migration to start of spring migration
qtl.end.fall.mig=0.95 #quantile of end of fall migration dates, which serve to start the winter period for each year
qtl.start.spring.mig=0.05   #quantile of start of spring migration dates, which serve to end the winter period for each year
out_fldr="C:/Users/jmerkle/Desktop/Mapp2/tab6output/sequencesW"   #this is where you want to sequences saved to
out_proj="+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
#manage packages
if(all(c("rgdal","foreign","stringr","sf") %in% installed.packages()[,1])==FALSE)
stop("You must install the following packages: rgdal, foreign, sf, and stringr")
require(rgdal)
require(foreign)
require(stringr)
require(sf)
#check teh new directory
if(dir.exists(out_fldr)==FALSE){
dir.create(out_fldr)
}
if(length(dir(out_fldr))> 0)
stop("Your out_fldr Has something in it. It should be empty!")
fl <- read.csv(mig.metadata.file)   #Note, that you MUST do migration BBs before you can do winter range BBs!
fl$seas <- substr(str_split_fixed(fl$input.file, "_",2)[,2],1,2)
fl$yr <- substr(str_split_fixed(fl$input.file, "_",2)[,2],3,4)
fl$yr <- as.numeric(ifelse(as.numeric(fl$yr) > 80, paste0("19",fl$yr), paste0("20",fl$yr)))
fl$Start.Date <- as.POSIXct(strptime(fl$Start.Date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
fl$End.Date <- as.POSIXct(strptime(fl$End.Date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
fl$id <- str_split_fixed(fl$input.file, "_",2)[,1]
ids <- unique(fl$id)
dts <- do.call(rbind, lapply(1:length(ids), function(i){
tmp <- fl[fl$id == ids[i],]
yr_rng <- sort(unique(tmp$yr))
tmp2 <- do.call(rbind, lapply(0:length(yr_rng), function(e){
if(e == 0){
wint.end <- fl$Start.Date[fl$id==ids[i] & fl$seas == "sp" & fl$yr == yr_rng[e+1]]
if(length(wint.end)==0){
wint.end <- NA
}
return(data.frame(id=ids[i], wintr=paste(yr_rng[e+1]-1, yr_rng[e+1], sep="_"),
id_yr=paste(ids[i],substr(yr_rng[e+1],3,4),sep="_"), wint.start=NA,
wint.end=as.character(wint.end-86400)))
}else{
if(e == length(yr_rng)){
wint.start <- fl$End.Date[fl$id==ids[i] & fl$seas == "fa" & fl$yr == yr_rng[e]]
if(length(wint.start)==0){
wint.start <- NA
}
return(data.frame(id=ids[i], wintr=paste(yr_rng[e], yr_rng[e]+1, sep="_"),
id_yr=paste(ids[i],substr(yr_rng[e+1],3,4),sep="_"),
wint.start=as.character(wint.start+86400),
wint.end=NA))
}else{
wint.start <- fl$End.Date[fl$id==ids[i] & fl$seas == "fa" & fl$yr == yr_rng[e]]
wint.end <- fl$Start.Date[fl$id==ids[i] & fl$seas == "sp" & fl$yr == yr_rng[e+1]]
if(length(wint.end)==0){
wint.end <- NA
}
if(length(wint.start)==0){
wint.start <- NA
}
return(data.frame(id=ids[i], wintr=paste(yr_rng[e], yr_rng[e+1], sep="_"),
id_yr=paste(ids[i],substr(yr_rng[e+1],3,4),sep="_"),
wint.start=as.character(wint.start+86400),
wint.end=as.character(wint.end-86400)))
}
}
}))
return(tmp2)
}))
#fix the dates  (it is OK to specify GMT, since all dates will be in GMT!)
dts$wint.start <- as.character(dts$wint.start)
dts$wint.end <- as.character(dts$wint.end)
mnths <- as.numeric(substr(na.omit(dts$wint.start), 6,7))
mn_strt <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.start)),6,10)),format = "%Y-%m-%d")))
if(as.numeric(substr(mn_strt,6,7)) > 8){
yrs <- substr(dts$wintr[is.na(dts$wint.start)==TRUE],1,4)
}else{
yrs <- substr(dts$wintr[is.na(dts$wint.start)==TRUE],6,9)
}
dts$wint.start[is.na(dts$wint.start)==TRUE] <- paste0(yrs, "-", substr(mn_strt,6,10), " 23:00:00")
mnths <- as.numeric(substr(na.omit(dts$wint.end), 6,7))
mn_end <- mean(as.Date(strptime(paste0(ifelse(mnths > 8, "2017","2018"),"-",substr(na.omit(as.character(dts$wint.end)),6,10)),format = "%Y-%m-%d")))
if(as.numeric(substr(mn_end,6,7)) > 8){
yrs <- substr(dts$wintr[is.na(dts$wint.end)==TRUE],1,4)
}else{
yrs <- substr(dts$wintr[is.na(dts$wint.end)==TRUE],6,9)
}
dts$wint.end[is.na(dts$wint.end)==TRUE] <- paste0(yrs, "-", substr(mn_end,6,10), " 01:00:00")
dts$wint.start <- as.POSIXct(strptime(dts$wint.start,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
dts$wint.end <- as.POSIXct(strptime(dts$wint.end,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
# read in the shapefile
print("Loading the shapefile (this can take a few minutes)...")
# d <- readOGR(shpfl_fldr, shpfl_name)
d <- st_read(shpfl_fldr, shpfl_name)   #use sf package
d <- as(d, "Spatial")
print(paste0("Your shapefiles has ", nrow(d), " rows."))
if(all(c(idname,datename) %in% names(d)) == FALSE)
stop("There is an issue with the columns in your sequences. See Error 1b.")
#reproject to new projection, if necessary
proj <- proj4string(d)
if(proj != out_proj){
d <- spTransform(d, CRS(out_proj))
}
#reduce the dataset to columns of interest
d <- d[,c(idname,datename)]
names(d) <- c("id","date")
#fix the dates  (it is OK to specify GMT, since all dates will be in GMT!)
d$date <- as.POSIXct(strptime(d$date,format = "%Y-%m-%d %H:%M:%S"), tz="GMT")
if(any(is.na(d$date)))
stop("You have a problem with your date column! It does not seem to be a character that was previously in POSIX format.")
print("Identifying sequences...")
d$id <- as.character(d$id)
dts$id <- as.character(dts$id)
for(i in 1:nrow(dts)){
print(i)
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
}
warnings()
i=1
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=2
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=3
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=4
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=5
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=6
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=7
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=8
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=9
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=10
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=11
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=12
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=13
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=14
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=15]
i=15
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=16
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
i=17]
i=17
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
for(i in 1:nrow(dts)){
print(i)
tmp <- d[d$date >= dts$wint.start[i] & d$date <= dts$wint.end[i] & d$id == dts$id[i],]
tmp <- cbind(as.data.frame(tmp)[,c("id","date")],coordinates(tmp))    # get it out of sp object
tmp$date <- as.character(tmp$date)    #need to switch this back to character for dbf files
names(tmp) <- c("id","date","x","y")   # rename columns
if(nrow(tmp)>0){
write.dbf(tmp, file = paste0(out_fldr,"/",dts$id_yr[i],".dbf"))    #write as dbf
}else{
next
}
}
3600*12
